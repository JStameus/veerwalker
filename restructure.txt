[ENCOUNTER MANAGER]
1. The encounter manager loads an encounter file containing info about music, background,
and the name of the enemy party.

2. Once the encounter file has been loaded, the encounter manager searches for the party files, and loads them
into the encounter.

3. The encounter manager loads the player party.

4. The encounter manager uses the CharacterAvatar class to create Character Avatars of all player and enemy characters.

5. The encounter manager assigns player characters to the playerTeam and the enemy characters to the enemyTeam.

6. The encounter manager calls the EncounterUIManager class and creates elements on the "board" to display all characters. 

7. The encounter manager calls the CombatCalculator class and rolls initiative for all characters in the encounter.

8. The encounter manager assigns all characters to the turn order. 

9. The encounter manager starts the encounter by assigning the first character on the turn order as activeCharacter. 

----------------------------------------------------------------------------------------------------------------------------

[CHARACTER FILES]
The character files should contain the default values for all their stats, NOT the current values as modified by previous 
damage or active status effects. They are simply character sheets. All calculations to modify HP or stats are done to
the CHARACTER AVATAR. 

----------------------------------------------------------------------------------------------------------------------------

[CHARACTER AVATARS]
CharacterAvatar objects are representations of a character that contain info about their max and current HP and AP,
as well as if they are dead or not. Any CombatCalculator method should target these avatars, nothing else. 

----------------------------------------------------------------------------------------------------------------------------

[ENCOUNTER AI]
The AI is very simple for now. When it's an enemy NPCs turn, it gets a list of all enemy Character Avatars that
are NOT dead, creates a random integer between 0 and the amount of available targets, and uses the integer to 
select the index in the list of targets. When the target has been acquired, the NPC attacks just like any other 
character would. 

----------------------------------------------------------------------------------------------------------------------------

[CLASSES AND FILES]
I need to figure out which classes belong together, which ones are unique to encounters, and which ones will be "universal".
Time to brainstorm: 

Encounter-specific:
    - Encounter Manager (is not a class, simply a script that uses other classes and some internal functions)
    - Encounter UI Manager
    - Target Manager(Inherits from EncounterUIManager)
    - Combat Calculator(Inherits from Diceroller)

Universal:
    - AI Manager(can be used both in encounters and later on in the world map)
    - Character Avatars(used in encounters, but also for modifying stats in dialogue or inventory)
    - Diceroller(used for anything that requires random numbers, but it does nothing more than roll dice)

So, which classes do I need for a fully functional encounter?
    1. Encounter UI Manager for creating display stuff on the board
    2. Target Manager for switching targets and changing classes on character divs
    3. Diceroller for the CombatCalculator to work 
    4. Combat Calculator for attacking, rolling damage and initiative
    5. CharacterAvatars for populating the encounter 
    6. AI Manager for helping NPCs do stuff like picking targets and attacking
    7. File Loader for loading files, searching for files etc
    8. The encounter manager itself for coordinating all these classes and handling turns and win states

